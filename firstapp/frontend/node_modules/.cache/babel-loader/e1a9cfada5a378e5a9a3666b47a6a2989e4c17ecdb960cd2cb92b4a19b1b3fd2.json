{"ast":null,"code":"import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { ParticleBuffer } from './ParticleBuffer.mjs';\nimport { ParticleShader } from './shader/ParticleShader.mjs';\n\"use strict\";\nclass ParticleContainerPipe {\n  /**\n   * @param renderer - The renderer this sprite batch works for.\n   * @param adaptor\n   */\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this._gpuBufferHash = /* @__PURE__ */Object.create(null);\n    // eslint-disable-next-line max-len\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.localUniforms = new UniformGroup({\n      uTranslationMatrix: {\n        value: new Matrix(),\n        type: \"mat3x3<f32>\"\n      },\n      uColor: {\n        value: new Float32Array(4),\n        type: \"vec4<f32>\"\n      },\n      uRound: {\n        value: 1,\n        type: \"f32\"\n      },\n      uResolution: {\n        value: [0, 0],\n        type: \"vec2<f32>\"\n      }\n    });\n    this.renderer = renderer;\n    this.adaptor = adaptor;\n    this.defaultShader = new ParticleShader();\n    this.state = State.for2d();\n  }\n  validateRenderable(_renderable) {\n    return false;\n  }\n  addRenderable(renderable, instructionSet) {\n    this.renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(renderable);\n  }\n  getBuffers(renderable) {\n    return this._gpuBufferHash[renderable.uid] || this._initBuffer(renderable);\n  }\n  _initBuffer(renderable) {\n    this._gpuBufferHash[renderable.uid] = new ParticleBuffer({\n      size: renderable.particleChildren.length,\n      properties: renderable._properties\n    });\n    renderable.on(\"destroyed\", this._destroyRenderableBound);\n    return this._gpuBufferHash[renderable.uid];\n  }\n  updateRenderable(_renderable) {}\n  destroyRenderable(renderable) {\n    const buffer = this._gpuBufferHash[renderable.uid];\n    buffer.destroy();\n    this._gpuBufferHash[renderable.uid] = null;\n    renderable.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(container) {\n    const children = container.particleChildren;\n    if (children.length === 0) {\n      return;\n    }\n    const renderer = this.renderer;\n    const buffer = this.getBuffers(container);\n    container.texture || (container.texture = children[0].texture);\n    const state = this.state;\n    buffer.update(children, container._childrenDirty);\n    container._childrenDirty = false;\n    state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n    const uniforms = this.localUniforms.uniforms;\n    const transformationMatrix = uniforms.uTranslationMatrix;\n    container.worldTransform.copyTo(transformationMatrix);\n    transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n    uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n    uniforms.uRound = renderer._roundPixels | container._roundPixels;\n    color32BitToUniform(container.groupColorAlpha, uniforms.uColor, 0);\n    this.adaptor.execute(this, container);\n  }\n  /** Destroys the ParticleRenderer. */\n  destroy() {\n    if (this.defaultShader) {\n      this.defaultShader.destroy();\n      this.defaultShader = null;\n    }\n  }\n}\nexport { ParticleContainerPipe };","map":{"version":3,"names":["ParticleContainerPipe","constructor","renderer","adaptor","state","State","for2d","_gpuBufferHash","Object","create","_destroyRenderableBound","destroyRenderable","bind","localUniforms","UniformGroup","uTranslationMatrix","value","Matrix","type","uColor","Float32Array","uRound","uResolution","defaultShader","ParticleShader","validateRenderable","_renderable","addRenderable","renderable","instructionSet","renderPipes","batch","break","add","getBuffers","uid","_initBuffer","ParticleBuffer","size","particleChildren","length","properties","_properties","on","updateRenderable","buffer","destroy","off","execute","container","children","texture","update","_childrenDirty","blendMode","getAdjustedBlendModeBlend","_source","uniforms","transformationMatrix","worldTransform","copyTo","prepend","globalUniforms","globalUniformData","projectionMatrix","resolution","_roundPixels","color32BitToUniform","groupColorAlpha"],"sources":["/Users/huangjiashu/Desktop/AI Projects/node_modules/pixi.js/src/scene/particle-container/shared/ParticleContainerPipe.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { State } from '../../../rendering/renderers/shared/state/State';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform';\nimport { ParticleBuffer } from './ParticleBuffer';\nimport { ParticleShader } from './shader/ParticleShader';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Container } from '../../container/Container';\nimport type { ParticleContainer } from './ParticleContainer';\n\nexport interface ParticleContainerAdaptor\n{\n    execute(particleContainerPop: ParticleContainerPipe, container: ParticleContainer): void;\n}\n\n/**\n * Renderer for Particles that is designer for speed over feature set.\n * @memberof scene\n */\nexport class ParticleContainerPipe implements RenderPipe<ParticleContainer>\n{\n    /** The default shader that is used if a sprite doesn't have a more specific one. */\n    public defaultShader: Shader;\n\n    public adaptor: ParticleContainerAdaptor;\n    public readonly state = State.for2d();\n    public readonly renderer: Renderer;\n\n    private _gpuBufferHash: Record<number, ParticleBuffer> = Object.create(null);\n    // eslint-disable-next-line max-len\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as unknown as (renderable: Container) => void;\n\n    public readonly localUniforms = new UniformGroup({\n        uTranslationMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        uColor: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uRound: { value: 1, type: 'f32' },\n        uResolution: { value: [0, 0], type: 'vec2<f32>' },\n    });\n\n    /**\n     * @param renderer - The renderer this sprite batch works for.\n     * @param adaptor\n     */\n    constructor(renderer: Renderer, adaptor: ParticleContainerAdaptor)\n    {\n        this.renderer = renderer;\n\n        this.adaptor = adaptor;\n\n        this.defaultShader = new ParticleShader();\n\n        this.state = State.for2d();\n    }\n\n    public validateRenderable(_renderable: ParticleContainer): boolean\n    {\n        // always fine :D\n        return false;\n    }\n\n    public addRenderable(renderable: ParticleContainer, instructionSet: InstructionSet)\n    {\n        this.renderer.renderPipes.batch.break(instructionSet);\n        instructionSet.add(renderable);\n    }\n\n    public getBuffers(renderable: ParticleContainer): ParticleBuffer\n    {\n        return this._gpuBufferHash[renderable.uid] || this._initBuffer(renderable);\n    }\n\n    private _initBuffer(renderable: ParticleContainer): ParticleBuffer\n    {\n        this._gpuBufferHash[renderable.uid] = new ParticleBuffer({\n            size: renderable.particleChildren.length,\n            properties: renderable._properties,\n        });\n\n        renderable.on('destroyed', this._destroyRenderableBound);\n\n        return this._gpuBufferHash[renderable.uid];\n    }\n\n    public updateRenderable(_renderable: ParticleContainer)\n    {\n        // nothing to be done here!\n\n    }\n\n    public destroyRenderable(renderable: ParticleContainer)\n    {\n        const buffer = this._gpuBufferHash[renderable.uid];\n\n        buffer.destroy();\n\n        this._gpuBufferHash[renderable.uid] = null;\n\n        renderable.off('destroyed', this._destroyRenderableBound);\n    }\n\n    public execute(container: ParticleContainer): void\n    {\n        const children = container.particleChildren;\n\n        if (children.length === 0)\n        {\n            return;\n        }\n\n        const renderer = this.renderer;\n        const buffer = this.getBuffers(container);\n\n        container.texture ||= children[0].texture;\n\n        const state = this.state;\n\n        buffer.update(children, container._childrenDirty);\n        container._childrenDirty = false;\n\n        state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n\n        const uniforms = this.localUniforms.uniforms;\n\n        const transformationMatrix = uniforms.uTranslationMatrix;\n\n        container.worldTransform.copyTo(transformationMatrix);\n\n        transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n\n        uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n        uniforms.uRound = renderer._roundPixels | container._roundPixels;\n\n        color32BitToUniform(\n            container.groupColorAlpha,\n            uniforms.uColor,\n            0\n        );\n\n        this.adaptor.execute(this, container);\n    }\n\n    /** Destroys the ParticleRenderer. */\n    public destroy(): void\n    {\n        if (this.defaultShader)\n        {\n            this.defaultShader.destroy();\n            this.defaultShader = null;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}