{"ast":null,"code":"import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { updateQuadBounds } from '../../../utils/data/updateQuadBounds.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../../sprite/BatchableSprite.mjs';\n\"use strict\";\nclass CanvasTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuText\");\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      if (!gpuText) continue;\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const newKey = text._getKey();\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(text, instructionSet) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n  }\n  updateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    batchableSprite._batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(text) {\n    text.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableById(text.uid);\n  }\n  _destroyRenderableById(textUid) {\n    const gpuText = this._gpuText[textUid];\n    this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[textUid] = null;\n  }\n  _updateText(text) {\n    const newKey = text._getKey();\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(text);\n    }\n    text._didTextUpdate = false;\n    const padding = text._style.padding;\n    updateQuadBounds(batchableSprite.bounds, text._anchor, batchableSprite.texture, padding);\n  }\n  _updateGpuText(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.texture) {\n      this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    }\n    gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n    gpuText.currentKey = text._getKey();\n    batchableSprite.texture = gpuText.texture;\n  }\n  _getGpuText(text) {\n    return this._gpuText[text.uid] || this.initGpuText(text);\n  }\n  initGpuText(text) {\n    const gpuTextData = {\n      texture: null,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite)\n    };\n    gpuTextData.batchableSprite.renderable = text;\n    gpuTextData.batchableSprite.transform = text.groupTransform;\n    gpuTextData.batchableSprite.bounds = {\n      minX: 0,\n      maxX: 1,\n      minY: 0,\n      maxY: 0\n    };\n    gpuTextData.batchableSprite.roundPixels = this._renderer._roundPixels | text._roundPixels;\n    this._gpuText[text.uid] = gpuTextData;\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    this._updateText(text);\n    text.on(\"destroyed\", this._destroyRenderableBound);\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nCanvasTextPipe.extension = {\n  type: [ExtensionType.WebGLPipes, ExtensionType.WebGPUPipes, ExtensionType.CanvasPipes],\n  name: \"text\"\n};\nexport { CanvasTextPipe };","map":{"version":3,"names":["CanvasTextPipe","constructor","renderer","_gpuText","Object","create","_destroyRenderableBound","destroyRenderable","bind","_renderer","runners","resolutionChange","add","renderableGC","addManagedHash","i","gpuText","text","batchableSprite","renderable","_autoResolution","_resolution","resolution","onViewUpdate","validateRenderable","_getGpuText","newKey","_getKey","currentKey","addRenderable","instructionSet","_didTextUpdate","_updateText","renderPipes","batch","addToBatch","updateRenderable","_batcher","updateElement","off","_destroyRenderableById","uid","textUid","canvasText","decreaseReferenceCount","BigPool","return","_updateGpuText","padding","_style","updateQuadBounds","bounds","_anchor","texture","getManagedTexture","initGpuText","gpuTextData","get","BatchableSprite","transform","groupTransform","minX","maxX","minY","maxY","roundPixels","_roundPixels","on","destroy","extension","type","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","name"],"sources":["/Users/huangjiashu/Desktop/AI Projects/node_modules/pixi.js/src/scene/text/canvas/CanvasTextPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { updateQuadBounds } from '../../../utils/data/updateQuadBounds';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../../sprite/BatchableSprite';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Container } from '../../container/Container';\nimport type { Text } from '../Text';\n\nexport class CanvasTextPipe implements RenderPipe<Text>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'text',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.runners.resolutionChange.add(this);\n        this._renderer.renderableGC.addManagedHash(this, '_gpuText');\n    }\n\n    public resolutionChange()\n    {\n        for (const i in this._gpuText)\n        {\n            const gpuText = this._gpuText[i];\n\n            if (!gpuText) continue;\n\n            const text = gpuText.batchableSprite.renderable as Text;\n\n            if (text._autoResolution)\n            {\n                text._resolution = this._renderer.resolution;\n                text.onViewUpdate();\n            }\n        }\n    }\n\n    public validateRenderable(text: Text): boolean\n    {\n        const gpuText = this._getGpuText(text);\n\n        const newKey = text._getKey();\n\n        if (gpuText.currentKey !== newKey)\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(text: Text, instructionSet: InstructionSet)\n    {\n        const gpuText = this._getGpuText(text);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n    }\n\n    public updateRenderable(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        batchableSprite._batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(text: Text)\n    {\n        text.off('destroyed', this._destroyRenderableBound);\n\n        this._destroyRenderableById(text.uid);\n    }\n\n    private _destroyRenderableById(textUid: number)\n    {\n        const gpuText = this._gpuText[textUid];\n\n        this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[textUid] = null;\n    }\n\n    private _updateText(text: Text)\n    {\n        const newKey = text._getKey();\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(text);\n        }\n\n        text._didTextUpdate = false;\n\n        const padding = text._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, text._anchor, batchableSprite.texture, padding);\n    }\n\n    private _updateGpuText(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.texture)\n        {\n            this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n        }\n\n        gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n        gpuText.currentKey = text._getKey();\n        batchableSprite.texture = gpuText.texture;\n    }\n\n    private _getGpuText(text: Text)\n    {\n        return this._gpuText[text.uid] || this.initGpuText(text);\n    }\n\n    public initGpuText(text: Text)\n    {\n        const gpuTextData: CanvasTextPipe['_gpuText'][number] = {\n            texture: null,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n        };\n\n        gpuTextData.batchableSprite.renderable = text;\n        gpuTextData.batchableSprite.transform = text.groupTransform;\n        gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        gpuTextData.batchableSprite.roundPixels = (this._renderer._roundPixels | text._roundPixels) as 0 | 1;\n\n        this._gpuText[text.uid] = gpuTextData;\n\n        text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n        this._updateText(text);\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        text.on('destroyed', this._destroyRenderableBound);\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}