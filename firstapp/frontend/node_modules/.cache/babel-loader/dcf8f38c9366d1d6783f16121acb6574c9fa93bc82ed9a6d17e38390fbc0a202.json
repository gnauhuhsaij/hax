{"ast":null,"code":"import { HTMLTextRenderData } from '../HTMLTextRenderData.mjs';\n\"use strict\";\nlet tempHTMLTextRenderData;\nfunction measureHtmlText(text, style, fontStyleCSS, htmlTextRenderData) {\n  htmlTextRenderData = htmlTextRenderData || tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData());\n  const {\n    domElement,\n    styleElement,\n    svgRoot\n  } = htmlTextRenderData;\n  domElement.innerHTML = `<style>${style.cssStyle};</style><div style='padding:0'>${text}</div>`;\n  domElement.setAttribute(\"style\", \"transform-origin: top left; display: inline-block\");\n  if (fontStyleCSS) {\n    styleElement.textContent = fontStyleCSS;\n  }\n  document.body.appendChild(svgRoot);\n  const contentBounds = domElement.getBoundingClientRect();\n  svgRoot.remove();\n  const doublePadding = style.padding * 2;\n  return {\n    width: contentBounds.width - doublePadding,\n    height: contentBounds.height - doublePadding\n  };\n}\nexport { measureHtmlText };","map":{"version":3,"names":["tempHTMLTextRenderData","measureHtmlText","text","style","fontStyleCSS","htmlTextRenderData","HTMLTextRenderData","domElement","styleElement","svgRoot","innerHTML","cssStyle","setAttribute","textContent","document","body","appendChild","contentBounds","getBoundingClientRect","remove","doublePadding","padding","width","height"],"sources":["/Users/huangjiashu/Desktop/AI Projects/node_modules/pixi.js/src/scene/text-html/utils/measureHtmlText.ts"],"sourcesContent":["import { HTMLTextRenderData } from '../HTMLTextRenderData';\n\nimport type { Size } from '../../../maths/misc/Size';\nimport type { HTMLTextStyle } from '../HtmlTextStyle';\n\nlet tempHTMLTextRenderData: HTMLTextRenderData;\n\n/**\n * Measures the HTML text without actually generating an image.\n * This is used to calculate the size of the text.\n * @param text - The text to measure\n * @param style - The style to use\n * @param fontStyleCSS - The font css to use\n * @param htmlTextRenderData - The HTMLTextRenderData to write the SVG to\n * @returns - The size of the text\n */\nexport function measureHtmlText(\n    text: string,\n    style: HTMLTextStyle,\n    fontStyleCSS?: string,\n    htmlTextRenderData?: HTMLTextRenderData\n): Size\n{\n    htmlTextRenderData = htmlTextRenderData || tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData());\n\n    const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n\n    domElement.innerHTML = `<style>${style.cssStyle};</style><div style='padding:0'>${text}</div>`;\n\n    domElement.setAttribute('style', 'transform-origin: top left; display: inline-block');\n\n    if (fontStyleCSS)\n    {\n        styleElement.textContent = fontStyleCSS;\n    }\n\n    // Measure the contents using the shadow DOM\n    document.body.appendChild(svgRoot);\n\n    const contentBounds = domElement.getBoundingClientRect();\n\n    svgRoot.remove();\n\n    // padding is included in the CSS calculation, so we need to remove it here\n    const doublePadding = style.padding * 2;\n\n    return {\n        width: contentBounds.width - doublePadding,\n        height: contentBounds.height - doublePadding,\n    };\n}\n"],"mappings":";;AAKA,IAAIA,sBAAA;AAWG,SAASC,eACZA,CAAAC,IAAA,EACAC,KACA,EAAAC,YAAA,EACAC,kBAEJ;EACIA,kBAAA,GAAqBA,kBAAsB,IAAAL,sBAAA,KAA2BA,sBAAyB,OAAIM,kBAAmB;EAEtH,MAAM;IAAEC,UAAA;IAAYC,YAAc;IAAAC;EAAA,CAAY,GAAAJ,kBAAA;EAE9CE,UAAA,CAAWG,SAAY,aAAUP,KAAM,CAAAQ,QAAQ,mCAAmCT,IAAI;EAE3EK,UAAA,CAAAK,YAAA,CAAa,SAAS,mDAAmD;EAEpF,IAAIR,YACJ;IACII,YAAA,CAAaK,WAAc,GAAAT,YAAA;EAAA;EAItBU,QAAA,CAAAC,IAAA,CAAKC,WAAA,CAAYP,OAAO;EAE3B,MAAAQ,aAAA,GAAgBV,UAAA,CAAWW,qBAAsB;EAEvDT,OAAA,CAAQU,MAAO;EAGT,MAAAC,aAAA,GAAgBjB,KAAA,CAAMkB,OAAU;EAE/B;IACHC,KAAA,EAAOL,aAAA,CAAcK,KAAQ,GAAAF,aAAA;IAC7BG,MAAA,EAAQN,aAAA,CAAcM,MAAS,GAAAH;EAAA,CACnC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}