{"ast":null,"code":"\"use strict\";\n\nfunction buildInstructions(renderGroup, rendererOrPipes) {\n  const root = renderGroup.root;\n  const instructionSet = renderGroup.instructionSet;\n  instructionSet.reset();\n  const renderer = rendererOrPipes.renderPipes ? rendererOrPipes : rendererOrPipes.batch.renderer;\n  const renderPipes = renderer.renderPipes;\n  renderPipes.batch.buildStart(instructionSet);\n  renderPipes.blendMode.buildStart();\n  renderPipes.colorMask.buildStart();\n  if (root.sortableChildren) {\n    root.sortChildren();\n  }\n  collectAllRenderablesAdvanced(root, instructionSet, renderer, true);\n  renderPipes.batch.buildEnd(instructionSet);\n  renderPipes.blendMode.buildEnd(instructionSet);\n}\nfunction collectAllRenderables(container, instructionSet, rendererOrPipes) {\n  const renderer = rendererOrPipes.renderPipes ? rendererOrPipes : rendererOrPipes.batch.renderer;\n  if (container.globalDisplayStatus < 7 || !container.includeInBuild) return;\n  if (container.sortableChildren) {\n    container.sortChildren();\n  }\n  if (container.isSimple) {\n    collectAllRenderablesSimple(container, instructionSet, renderer);\n  } else {\n    collectAllRenderablesAdvanced(container, instructionSet, renderer, false);\n  }\n}\nfunction collectAllRenderablesSimple(container, instructionSet, renderer) {\n  if (container.renderPipeId) {\n    const renderable = container;\n    const {\n      renderPipes,\n      renderableGC\n    } = renderer;\n    renderPipes.blendMode.setBlendMode(renderable, container.groupBlendMode, instructionSet);\n    const rp = renderPipes;\n    rp[renderable.renderPipeId].addRenderable(renderable, instructionSet);\n    renderableGC.addRenderable(renderable, instructionSet);\n    renderable.didViewUpdate = false;\n  }\n  if (!container.renderGroup) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      collectAllRenderables(children[i], instructionSet, renderer);\n    }\n  }\n}\nfunction collectAllRenderablesAdvanced(container, instructionSet, renderer, isRoot) {\n  const {\n    renderPipes,\n    renderableGC\n  } = renderer;\n  if (!isRoot && container.renderGroup) {\n    renderPipes.renderGroup.addRenderGroup(container.renderGroup, instructionSet);\n  } else {\n    for (let i = 0; i < container.effects.length; i++) {\n      const effect = container.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.push(effect, container, instructionSet);\n    }\n    const renderable = container;\n    const renderPipeId = renderable.renderPipeId;\n    if (renderPipeId) {\n      renderPipes.blendMode.setBlendMode(renderable, renderable.groupBlendMode, instructionSet);\n      const pipe = renderPipes[renderPipeId];\n      pipe.addRenderable(renderable, instructionSet);\n      renderableGC.addRenderable(renderable, instructionSet);\n      renderable.didViewUpdate = false;\n    }\n    const children = container.children;\n    if (children.length) {\n      for (let i = 0; i < children.length; i++) {\n        collectAllRenderables(children[i], instructionSet, renderer);\n      }\n    }\n    for (let i = container.effects.length - 1; i >= 0; i--) {\n      const effect = container.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.pop(effect, container, instructionSet);\n    }\n  }\n}\nexport { buildInstructions, collectAllRenderables };","map":{"version":3,"names":["buildInstructions","renderGroup","rendererOrPipes","root","instructionSet","reset","renderer","renderPipes","batch","buildStart","blendMode","colorMask","sortableChildren","sortChildren","collectAllRenderablesAdvanced","buildEnd","collectAllRenderables","container","globalDisplayStatus","includeInBuild","isSimple","collectAllRenderablesSimple","renderPipeId","renderable","renderableGC","setBlendMode","groupBlendMode","rp","addRenderable","didViewUpdate","children","length","i","isRoot","addRenderGroup","effects","effect","pipe","push","pop"],"sources":["/Users/huangjiashu/Desktop/AI Projects/node_modules/pixi.js/src/scene/container/utils/buildInstructions.ts"],"sourcesContent":["import type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe, RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Renderer, RenderPipes } from '../../../rendering/renderers/types';\nimport type { Container } from '../Container';\nimport type { RenderGroup } from '../RenderGroup';\n\n/**\n * @param renderGroup\n * @param renderPipes\n * @deprecated since 8.3.0\n */\nexport function buildInstructions(renderGroup: RenderGroup, renderPipes: RenderPipes): void;\nexport function buildInstructions(renderGroup: RenderGroup, renderer: Renderer): void;\nexport function buildInstructions(renderGroup: RenderGroup, rendererOrPipes: RenderPipes | Renderer): void\n{\n    const root = renderGroup.root;\n    const instructionSet = renderGroup.instructionSet;\n\n    instructionSet.reset();\n\n    // deprecate the use of renderPipes by finding the renderer attached to the batch pipe as this is always there\n    const renderer = (rendererOrPipes as Renderer).renderPipes\n        ? (rendererOrPipes as Renderer)\n        : (rendererOrPipes as RenderPipes).batch.renderer;\n    const renderPipes = renderer.renderPipes;\n\n    // TODO add some events / runners for build start\n    renderPipes.batch.buildStart(instructionSet);\n    renderPipes.blendMode.buildStart();\n    renderPipes.colorMask.buildStart();\n\n    if (root.sortableChildren)\n    {\n        root.sortChildren();\n    }\n\n    collectAllRenderablesAdvanced(root, instructionSet, renderer, true);\n\n    // TODO add some events / runners for build end\n    renderPipes.batch.buildEnd(instructionSet);\n    renderPipes.blendMode.buildEnd(instructionSet);\n}\n\n/**\n * @param container\n * @param instructionSet\n * @param renderer\n * @deprecated since 8.3.0\n */\nexport function collectAllRenderables(container: Container, instructionSet: InstructionSet, renderer: RenderPipes): void;\nexport function collectAllRenderables(container: Container, instructionSet: InstructionSet, renderer: Renderer): void;\nexport function collectAllRenderables(\n    container: Container, instructionSet: InstructionSet, rendererOrPipes: Renderer | RenderPipes\n): void\n{\n    // deprecate the use of renderPipes by finding the renderer attached to the batch pipe as this is always there\n    const renderer = (rendererOrPipes as Renderer).renderPipes\n        ? (rendererOrPipes as Renderer)\n        : (rendererOrPipes as RenderPipes).batch.renderer;\n\n    // if there is 0b01 or 0b10 the return value\n    if (container.globalDisplayStatus < 0b111 || !container.includeInBuild) return;\n\n    if (container.sortableChildren)\n    {\n        container.sortChildren();\n    }\n\n    if (container.isSimple)\n    {\n        collectAllRenderablesSimple(container, instructionSet, renderer);\n    }\n    else\n    {\n        collectAllRenderablesAdvanced(container, instructionSet, renderer, false);\n    }\n}\n\nfunction collectAllRenderablesSimple(\n    container: Container,\n    instructionSet: InstructionSet,\n    renderer: Renderer,\n): void\n{\n    if (container.renderPipeId)\n    {\n        const renderable = container as Renderable;\n        const { renderPipes, renderableGC } = renderer;\n\n        // TODO add blends in\n        renderPipes.blendMode.setBlendMode(renderable, container.groupBlendMode, instructionSet);\n\n        const rp = renderPipes as unknown as Record<string, RenderPipe>;\n\n        rp[renderable.renderPipeId].addRenderable(renderable, instructionSet);\n\n        renderableGC.addRenderable(renderable, instructionSet);\n\n        renderable.didViewUpdate = false;\n    }\n\n    if (!container.renderGroup)\n    {\n        const children = container.children;\n        const length = children.length;\n\n        for (let i = 0; i < length; i++)\n        {\n            collectAllRenderables(children[i], instructionSet, renderer);\n        }\n    }\n}\n\nfunction collectAllRenderablesAdvanced(\n    container: Container,\n    instructionSet: InstructionSet,\n    renderer: Renderer,\n    isRoot: boolean\n): void\n{\n    const { renderPipes, renderableGC } = renderer;\n\n    if (!isRoot && container.renderGroup)\n    {\n        renderPipes.renderGroup.addRenderGroup(container.renderGroup, instructionSet);\n    }\n    else\n    {\n        for (let i = 0; i < container.effects.length; i++)\n        {\n            const effect = container.effects[i];\n            const pipe = renderPipes[effect.pipe as keyof RenderPipes]as InstructionPipe<any>;\n\n            pipe.push(effect, container, instructionSet);\n        }\n\n        const renderable = container as Renderable;\n        const renderPipeId = renderable.renderPipeId;\n\n        if (renderPipeId)\n        {\n            // TODO add blends in\n            renderPipes.blendMode.setBlendMode(renderable, renderable.groupBlendMode, instructionSet);\n\n            const pipe = renderPipes[renderPipeId as keyof RenderPipes]as RenderPipe<any>;\n\n            pipe.addRenderable(renderable, instructionSet);\n\n            renderableGC.addRenderable(renderable, instructionSet);\n\n            renderable.didViewUpdate = false;\n        }\n\n        const children = container.children;\n\n        if (children.length)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                collectAllRenderables(children[i], instructionSet, renderer);\n            }\n        }\n\n        // loop backwards through effects\n        for (let i = container.effects.length - 1; i >= 0; i--)\n        {\n            const effect = container.effects[i];\n            const pipe = renderPipes[effect.pipe as keyof RenderPipes]as InstructionPipe<any>;\n\n            pipe.pop(effect, container, instructionSet);\n        }\n    }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}