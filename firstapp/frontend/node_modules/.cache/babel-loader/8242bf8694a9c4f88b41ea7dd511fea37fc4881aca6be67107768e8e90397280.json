{"ast":null,"code":"import { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { ViewContainer } from '../view/ViewContainer.mjs';\nimport { NineSliceGeometry } from './NineSliceGeometry.mjs';\n\"use strict\";\nconst _NineSliceSprite = class _NineSliceSprite extends ViewContainer {\n  /**\n   * @param {scene.NineSliceSpriteOptions|Texture} options - Options to use\n   * @param options.texture - The texture to use on the NineSliceSprite.\n   * @param options.leftWidth - Width of the left vertical bar (A)\n   * @param options.topHeight - Height of the top horizontal bar (C)\n   * @param options.rightWidth - Width of the right vertical bar (B)\n   * @param options.bottomHeight - Height of the bottom horizontal bar (D)\n   * @param options.width - Width of the NineSliceSprite,\n   * setting this will actually modify the vertices and not the UV's of this plane.\n   * @param options.height - Height of the NineSliceSprite,\n   * setting this will actually modify the vertices and not UV's of this plane.\n   */\n  constructor(options) {\n    if (options instanceof Texture) {\n      options = {\n        texture: options\n      };\n    }\n    const {\n      width,\n      height,\n      leftWidth,\n      rightWidth,\n      topHeight,\n      bottomHeight,\n      texture,\n      roundPixels,\n      ...rest\n    } = options;\n    super({\n      label: \"NineSliceSprite\",\n      ...rest\n    });\n    this.renderPipeId = \"nineSliceSprite\";\n    this.batched = true;\n    this._leftWidth = leftWidth ?? texture?.defaultBorders?.left ?? NineSliceGeometry.defaultOptions.leftWidth;\n    this._topHeight = topHeight ?? texture?.defaultBorders?.top ?? NineSliceGeometry.defaultOptions.topHeight;\n    this._rightWidth = rightWidth ?? texture?.defaultBorders?.right ?? NineSliceGeometry.defaultOptions.rightWidth;\n    this._bottomHeight = bottomHeight ?? texture?.defaultBorders?.bottom ?? NineSliceGeometry.defaultOptions.bottomHeight;\n    this.bounds.maxX = this._width = width ?? texture.width ?? NineSliceGeometry.defaultOptions.width;\n    this.bounds.maxY = this._height = height ?? texture.height ?? NineSliceGeometry.defaultOptions.height;\n    this.allowChildren = false;\n    this.texture = texture ?? _NineSliceSprite.defaultOptions.texture;\n    this.roundPixels = roundPixels ?? false;\n  }\n  /** The local bounds of the view. */\n  get bounds() {\n    return this._bounds;\n  }\n  /** The width of the NineSliceSprite, setting this will actually modify the vertices and UV's of this plane. */\n  get width() {\n    return this._width;\n  }\n  set width(value) {\n    this.bounds.maxX = this._width = value;\n    this.onViewUpdate();\n  }\n  /** The height of the NineSliceSprite, setting this will actually modify the vertices and UV's of this plane. */\n  get height() {\n    return this._height;\n  }\n  set height(value) {\n    this.bounds.maxY = this._height = value;\n    this.onViewUpdate();\n  }\n  /**\n   * Sets the size of the NiceSliceSprite to the specified width and height.\n   * setting this will actually modify the vertices and UV's of this plane\n   * This is faster than setting the width and height separately.\n   * @param value - This can be either a number or a [Size]{@link Size} object.\n   * @param height - The height to set. Defaults to the value of `width` if not provided.\n   */\n  setSize(value, height) {\n    if (typeof value === \"object\") {\n      height = value.height ?? value.width;\n      value = value.width;\n    }\n    this.bounds.maxX = this._width = value;\n    this.bounds.maxY = this._height = height ?? value;\n    this.onViewUpdate();\n  }\n  /**\n   * Retrieves the size of the NineSliceSprite as a [Size]{@link Size} object.\n   * This is faster than get the width and height separately.\n   * @param out - Optional object to store the size in.\n   * @returns - The size of the NineSliceSprite.\n   */\n  getSize(out) {\n    out || (out = {});\n    out.width = this._width;\n    out.height = this._height;\n    return out;\n  }\n  /** The width of the left column (a) of the NineSliceSprite. */\n  get leftWidth() {\n    return this._leftWidth;\n  }\n  set leftWidth(value) {\n    this._leftWidth = value;\n    this.onViewUpdate();\n  }\n  /** The width of the right column (b) of the NineSliceSprite. */\n  get topHeight() {\n    return this._topHeight;\n  }\n  set topHeight(value) {\n    this._topHeight = value;\n    this.onViewUpdate();\n  }\n  /** The width of the right column (b) of the NineSliceSprite. */\n  get rightWidth() {\n    return this._rightWidth;\n  }\n  set rightWidth(value) {\n    this._rightWidth = value;\n    this.onViewUpdate();\n  }\n  /** The width of the right column (b) of the NineSliceSprite. */\n  get bottomHeight() {\n    return this._bottomHeight;\n  }\n  set bottomHeight(value) {\n    this._bottomHeight = value;\n    this.onViewUpdate();\n  }\n  /** The texture that the NineSliceSprite is using. */\n  get texture() {\n    return this._texture;\n  }\n  set texture(value) {\n    value || (value = Texture.EMPTY);\n    const currentTexture = this._texture;\n    if (currentTexture === value) return;\n    if (currentTexture && currentTexture.dynamic) currentTexture.off(\"update\", this.onViewUpdate, this);\n    if (value.dynamic) value.on(\"update\", this.onViewUpdate, this);\n    this._texture = value;\n    this.onViewUpdate();\n  }\n  /** The original width of the texture */\n  get originalWidth() {\n    return this._texture.width;\n  }\n  /** The original height of the texture */\n  get originalHeight() {\n    return this._texture.height;\n  }\n  /**\n   * Adds the bounds of this object to the bounds object.\n   * @param bounds - The output bounds object.\n   */\n  addBounds(bounds) {\n    const _bounds = this.bounds;\n    bounds.addFrame(_bounds.minX, _bounds.minY, _bounds.maxX, _bounds.maxY);\n  }\n  /**\n   * Destroys this sprite renderable and optionally its texture.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the renderable as well\n   * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the renderable as well\n   */\n  destroy(options) {\n    super.destroy(options);\n    const destroyTexture = typeof options === \"boolean\" ? options : options?.texture;\n    if (destroyTexture) {\n      const destroyTextureSource = typeof options === \"boolean\" ? options : options?.textureSource;\n      this._texture.destroy(destroyTextureSource);\n    }\n    this._texture = null;\n  }\n};\n/** The default options, used to override the initial values of any options passed in the constructor. */\n_NineSliceSprite.defaultOptions = {\n  /** @default Texture.EMPTY */\n  texture: Texture.EMPTY\n};\nlet NineSliceSprite = _NineSliceSprite;\nclass NineSlicePlane extends NineSliceSprite {\n  constructor(...args) {\n    let options = args[0];\n    if (options instanceof Texture) {\n      deprecation(v8_0_0, \"NineSlicePlane now uses the options object {texture, leftWidth, rightWidth, topHeight, bottomHeight}\");\n      options = {\n        texture: options,\n        leftWidth: args[1],\n        topHeight: args[2],\n        rightWidth: args[3],\n        bottomHeight: args[4]\n      };\n    }\n    deprecation(v8_0_0, \"NineSlicePlane is deprecated. Use NineSliceSprite instead.\");\n    super(options);\n  }\n}\nexport { NineSlicePlane, NineSliceSprite };","map":{"version":3,"names":["_NineSliceSprite","ViewContainer","constructor","options","Texture","texture","width","height","leftWidth","rightWidth","topHeight","bottomHeight","roundPixels","rest","label","renderPipeId","batched","_leftWidth","defaultBorders","left","NineSliceGeometry","defaultOptions","_topHeight","top","_rightWidth","right","_bottomHeight","bottom","bounds","maxX","_width","maxY","_height","allowChildren","_bounds","value","onViewUpdate","setSize","getSize","out","_texture","EMPTY","currentTexture","dynamic","off","on","originalWidth","originalHeight","addBounds","addFrame","minX","minY","destroy","destroyTexture","destroyTextureSource","textureSource","NineSliceSprite","NineSlicePlane","args","deprecation","v8_0_0"],"sources":["/Users/huangjiashu/Desktop/AI Projects/node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceSprite.ts"],"sourcesContent":["import { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { ViewContainer } from '../view/ViewContainer';\nimport { NineSliceGeometry } from './NineSliceGeometry';\n\nimport type { Size } from '../../maths/misc/Size';\nimport type { View } from '../../rendering/renderers/shared/view/View';\nimport type { Bounds, BoundsData } from '../container/bounds/Bounds';\nimport type { ContainerOptions } from '../container/Container';\nimport type { Optional } from '../container/container-mixins/measureMixin';\nimport type { DestroyOptions } from '../container/destroyTypes';\n\n/**\n * Constructor options used for `NineSliceSprite` instances.\n * ```js\n * const nineSliceSprite = new NineSliceSprite({\n *    texture: Texture.from('button.png'),\n *    leftWidth: 20,\n *    topHeight: 20,\n *    rightWidth: 20,\n *    bottomHeight: 20,\n * });\n * ```\n * @see {@link scene.NineSliceSprite}\n * @memberof scene\n */\nexport interface NineSliceSpriteOptions extends ContainerOptions\n{\n    /** The texture to use on the NineSliceSprite. */\n    texture: Texture;\n    /** Width of the left vertical bar (A) */\n    leftWidth?: number;\n    /** Height of the top horizontal bar (C) */\n    topHeight?: number;\n    /** Width of the right vertical bar (B) */\n    rightWidth?: number;\n    /** Height of the bottom horizontal bar (D) */\n    bottomHeight?: number;\n    /** Width of the NineSliceSprite, setting this will actually modify the vertices and not the UV's of this plane. */\n    width?: number;\n    /** Height of the NineSliceSprite, setting this will actually modify the vertices and not UV's of this plane. */\n    height?: number;\n    /** Whether or not to round the x/y position. */\n    roundPixels?: boolean;\n}\n\n/**\n * The NineSliceSprite allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n * @example\n * import { NineSliceSprite, Texture } from 'pixi.js';\n *\n * const plane9 = new NineSliceSprite(Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n * @memberof scene\n */\nexport class NineSliceSprite extends ViewContainer implements View\n{\n    /** The default options, used to override the initial values of any options passed in the constructor. */\n    public static defaultOptions: NineSliceSpriteOptions = {\n        /** @default Texture.EMPTY */\n        texture: Texture.EMPTY,\n    };\n\n    public override readonly renderPipeId: string = 'nineSliceSprite';\n    public _texture: Texture;\n\n    public batched = true;\n\n    private _leftWidth: number;\n    private _topHeight: number;\n    private _rightWidth: number;\n    private _bottomHeight: number;\n    private _width: number;\n    private _height: number;\n\n    /**\n     * @param {scene.NineSliceSpriteOptions|Texture} options - Options to use\n     * @param options.texture - The texture to use on the NineSliceSprite.\n     * @param options.leftWidth - Width of the left vertical bar (A)\n     * @param options.topHeight - Height of the top horizontal bar (C)\n     * @param options.rightWidth - Width of the right vertical bar (B)\n     * @param options.bottomHeight - Height of the bottom horizontal bar (D)\n     * @param options.width - Width of the NineSliceSprite,\n     * setting this will actually modify the vertices and not the UV's of this plane.\n     * @param options.height - Height of the NineSliceSprite,\n     * setting this will actually modify the vertices and not UV's of this plane.\n     */\n    constructor(options: NineSliceSpriteOptions | Texture)\n    {\n        if ((options instanceof Texture))\n        {\n            options = { texture: options };\n        }\n\n        const {\n            width,\n            height,\n            leftWidth,\n            rightWidth,\n            topHeight,\n            bottomHeight,\n            texture,\n            roundPixels,\n            ...rest\n        } = options;\n\n        super({\n            label: 'NineSliceSprite',\n            ...rest\n        });\n\n        this._leftWidth = leftWidth ?? texture?.defaultBorders?.left ?? NineSliceGeometry.defaultOptions.leftWidth;\n        this._topHeight = topHeight ?? texture?.defaultBorders?.top ?? NineSliceGeometry.defaultOptions.topHeight;\n        this._rightWidth = rightWidth ?? texture?.defaultBorders?.right ?? NineSliceGeometry.defaultOptions.rightWidth;\n        this._bottomHeight = bottomHeight\n                            ?? texture?.defaultBorders?.bottom\n                            ?? NineSliceGeometry.defaultOptions.bottomHeight;\n        this.bounds.maxX = this._width = width ?? texture.width ?? NineSliceGeometry.defaultOptions.width;\n        this.bounds.maxY = this._height = height ?? texture.height ?? NineSliceGeometry.defaultOptions.height;\n\n        this.allowChildren = false;\n        this.texture = texture ?? NineSliceSprite.defaultOptions.texture;\n        this.roundPixels = roundPixels ?? false;\n    }\n\n    /** The local bounds of the view. */\n    public get bounds(): BoundsData\n    {\n        return this._bounds;\n    }\n\n    /** The width of the NineSliceSprite, setting this will actually modify the vertices and UV's of this plane. */\n    override get width(): number\n    {\n        return this._width;\n    }\n\n    override set width(value: number)\n    {\n        this.bounds.maxX = this._width = value;\n        this.onViewUpdate();\n    }\n\n    /** The height of the NineSliceSprite, setting this will actually modify the vertices and UV's of this plane. */\n    override get height(): number\n    {\n        return this._height;\n    }\n\n    override set height(value: number)\n    {\n        this.bounds.maxY = this._height = value;\n        this.onViewUpdate();\n    }\n\n    /**\n     * Sets the size of the NiceSliceSprite to the specified width and height.\n     * setting this will actually modify the vertices and UV's of this plane\n     * This is faster than setting the width and height separately.\n     * @param value - This can be either a number or a [Size]{@link Size} object.\n     * @param height - The height to set. Defaults to the value of `width` if not provided.\n     */\n    public override setSize(value: number | Optional<Size, 'height'>, height?: number): void\n    {\n        if (typeof value === 'object')\n        {\n            height = value.height ?? value.width;\n            value = value.width;\n        }\n\n        this.bounds.maxX = this._width = value;\n        this.bounds.maxY = this._height = height ?? value;\n        this.onViewUpdate();\n    }\n\n    /**\n     * Retrieves the size of the NineSliceSprite as a [Size]{@link Size} object.\n     * This is faster than get the width and height separately.\n     * @param out - Optional object to store the size in.\n     * @returns - The size of the NineSliceSprite.\n     */\n    public override getSize(out?: Size): Size\n    {\n        out ||= {} as Size;\n        out.width = this._width;\n        out.height = this._height;\n\n        return out;\n    }\n\n    /** The width of the left column (a) of the NineSliceSprite. */\n    get leftWidth(): number\n    {\n        return this._leftWidth;\n    }\n\n    set leftWidth(value: number)\n    {\n        this._leftWidth = value;\n\n        this.onViewUpdate();\n    }\n\n    /** The width of the right column (b) of the NineSliceSprite. */\n    get topHeight(): number\n    {\n        return this._topHeight;\n    }\n\n    set topHeight(value: number)\n    {\n        this._topHeight = value;\n        this.onViewUpdate();\n    }\n\n    /** The width of the right column (b) of the NineSliceSprite. */\n    get rightWidth(): number\n    {\n        return this._rightWidth;\n    }\n\n    set rightWidth(value: number)\n    {\n        this._rightWidth = value;\n        this.onViewUpdate();\n    }\n\n    /** The width of the right column (b) of the NineSliceSprite. */\n    get bottomHeight(): number\n    {\n        return this._bottomHeight;\n    }\n\n    set bottomHeight(value: number)\n    {\n        this._bottomHeight = value;\n        this.onViewUpdate();\n    }\n\n    /** The texture that the NineSliceSprite is using. */\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    set texture(value: Texture)\n    {\n        value ||= Texture.EMPTY;\n\n        const currentTexture = this._texture;\n\n        if (currentTexture === value) return;\n\n        if (currentTexture && currentTexture.dynamic) currentTexture.off('update', this.onViewUpdate, this);\n        if (value.dynamic) value.on('update', this.onViewUpdate, this);\n\n        this._texture = value;\n\n        this.onViewUpdate();\n    }\n\n    /** The original width of the texture */\n    get originalWidth()\n    {\n        return this._texture.width;\n    }\n\n    /** The original height of the texture */\n    get originalHeight()\n    {\n        return this._texture.height;\n    }\n\n    /**\n     * Adds the bounds of this object to the bounds object.\n     * @param bounds - The output bounds object.\n     */\n    public addBounds(bounds: Bounds)\n    {\n        const _bounds = this.bounds;\n\n        bounds.addFrame(_bounds.minX, _bounds.minY, _bounds.maxX, _bounds.maxY);\n    }\n\n    /**\n     * Destroys this sprite renderable and optionally its texture.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the renderable as well\n     * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the renderable as well\n     */\n    public override destroy(options?: DestroyOptions): void\n    {\n        super.destroy(options);\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyTextureSource = typeof options === 'boolean' ? options : options?.textureSource;\n\n            this._texture.destroy(destroyTextureSource);\n        }\n\n        this._texture = null;\n    }\n}\n\n/**\n * Please use the `NineSliceSprite` class instead.\n * @deprecated since 8.0.0\n * @memberof scene\n */\nexport class NineSlicePlane extends NineSliceSprite\n{\n    constructor(options: NineSliceSpriteOptions | Texture);\n    /** @deprecated since 8.0.0 */\n    constructor(texture: Texture, leftWidth: number, topHeight: number, rightWidth: number, bottomHeight: number);\n    constructor(...args: [NineSliceSpriteOptions | Texture] | [Texture, number, number, number, number])\n    {\n        let options = args[0];\n\n        if (options instanceof Texture)\n        {\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'NineSlicePlane now uses the options object {texture, leftWidth, rightWidth, topHeight, bottomHeight}');\n            // #endif\n\n            options = {\n                texture: options,\n                leftWidth: args[1],\n                topHeight: args[2],\n                rightWidth: args[3],\n                bottomHeight: args[4],\n            };\n        }\n\n        // #if _DEBUG\n        deprecation(v8_0_0, 'NineSlicePlane is deprecated. Use NineSliceSprite instead.');\n        // #endif\n\n        super(options);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}