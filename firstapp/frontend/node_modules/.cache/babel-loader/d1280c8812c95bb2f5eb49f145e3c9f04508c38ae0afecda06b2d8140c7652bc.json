{"ast":null,"code":"import { Color } from '../../../color/Color.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { assignWithIgnore } from '../../container/utils/assignWithIgnore.mjs';\n\"use strict\";\nconst _Particle = class _Particle {\n  constructor(options) {\n    if (options instanceof Texture) {\n      this.texture = options;\n      assignWithIgnore(this, _Particle.defaultOptions, {});\n    } else {\n      const combined = {\n        ..._Particle.defaultOptions,\n        ...options\n      };\n      assignWithIgnore(this, combined, {});\n    }\n  }\n  /** Gets or sets the alpha value of the particle. */\n  get alpha() {\n    return this._alpha;\n  }\n  set alpha(value) {\n    this._alpha = Math.min(Math.max(value, 0), 1);\n    this._updateColor();\n  }\n  /** Gets or sets the tint color of the particle. */\n  get tint() {\n    const bgr = this._tint;\n    return ((bgr & 255) << 16) + (bgr & 65280) + (bgr >> 16 & 255);\n  }\n  set tint(value) {\n    if (typeof value === \"number\") {\n      this._tint = value;\n    } else {\n      this._tint = Color.shared.setValue(value ?? 16777215).toBgrNumber();\n    }\n    this._updateColor();\n  }\n  _updateColor() {\n    this.color = this._tint + ((this._alpha * 255 | 0) << 24);\n  }\n};\n/** Default options for constructing with options */\n_Particle.defaultOptions = {\n  anchorX: 0,\n  anchorY: 0,\n  x: 0,\n  y: 0,\n  scaleX: 1,\n  scaleY: 1,\n  rotation: 0,\n  tint: 16777215,\n  alpha: 1\n};\nlet Particle = _Particle;\nexport { Particle };","map":{"version":3,"names":["_Particle","constructor","options","Texture","texture","assignWithIgnore","defaultOptions","combined","alpha","_alpha","value","Math","min","max","_updateColor","tint","bgr","_tint","Color","shared","setValue","toBgrNumber","color","anchorX","anchorY","x","y","scaleX","scaleY","rotation","Particle"],"sources":["/Users/huangjiashu/Desktop/AI Projects/node_modules/pixi.js/src/scene/particle-container/shared/Particle.ts"],"sourcesContent":["import { Color } from '../../../color/Color';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { assignWithIgnore } from '../../container/utils/assignWithIgnore';\n\nimport type { ColorSource } from '../../../color/Color';\n\n/**\n * Represents a particle with properties for position, scale, rotation, color, and texture.\n * @property {number} x - The x-coordinate of the particle.\n * @property {number} y - The y-coordinate of the particle.\n * @property {number} scaleX - The scale factor in the x-axis.\n * @property {number} scaleY - The scale factor in the y-axis.\n * @property {number} anchorX - The x-coordinate of the anchor point.\n * @property {number} anchorY - The y-coordinate of the anchor point.\n * @property {number} rotation - The rotation of the particle in radians.\n * @property {number} color - The color of the particle as a hexadecimal number.\n * @property {Texture} texture - The texture of the particle.\n * @memberof scene\n */\nexport interface IParticle\n{\n    x: number;\n    y: number;\n    scaleX: number;\n    scaleY: number;\n    anchorX: number;\n    anchorY: number;\n    rotation: number;\n    color: number;\n    texture: Texture;\n}\n\n/**\n * Represents the options for creating a new particle.\n * @property {number} x - The x-coordinate of the particle.\n * @property {number} y - The y-coordinate of the particle.\n * @property {number} scaleX - The scale factor in the x-axis.\n * @property {number} scaleY - The scale factor in the y-axis.\n * @property {number} anchorX - The x-coordinate of the anchor point.\n * @property {number} anchorY - The y-coordinate of the anchor point.\n * @property {number} rotation - The rotation of the particle in radians.\n * @property {Texture} texture - The texture of the particle.\n * @property {ColorSource} tint - The tint color of the particle as a hexadecimal number.\n * @property {number} alpha - The alpha value of the particle.\n * @memberof scene\n */\nexport type ParticleOptions = Omit<Partial<IParticle>, 'color'> & {\n    texture: Texture\n    tint?: ColorSource;\n    alpha?: number;\n};\n\n/**\n * Represents a single particle within a particle container. This class implements the IParticle interface,\n * providing properties and methods to manage the particle's position, scale, rotation, color, and texture.\n *\n * The reason we use a particle over a sprite is that these are much lighter weight and we can create a lot of them\n * without taking on the overhead of a full sprite.\n *\n * Here is an example of how to create a new particle:\n *\n * ```javascript\n * const particle = new Particle({\n *   texture,\n *   x: 100,\n *   y: 100,\n *   scaleX: 0.5,\n *   scaleY: 0.5,\n *   rotation: Math.PI / 2,\n *   color: 0xff0000,\n * });\n * ```\n * @implements {IParticle}\n * @memberof scene\n */\nexport class Particle implements IParticle\n{\n    /** Default options for constructing with options */\n    public static defaultOptions: Partial<ParticleOptions> = {\n        anchorX: 0,\n        anchorY: 0,\n        x: 0,\n        y: 0,\n        scaleX: 1,\n        scaleY: 1,\n        rotation: 0,\n        tint: 0xffffff,\n        alpha: 1,\n    };\n    /** The x-coordinate of the anchor point. */\n    public anchorX: number;\n    /** The y-coordinate of the anchor point. */\n    public anchorY: number;\n    /** The x-coordinate of the particle. */\n    public x: number;\n    /** The y-coordinate of the particle. */\n    public y: number;\n    /** The scale factor in the x-axis. */\n    public scaleX: number;\n    /** The scale factor in the y-axis. */\n    public scaleY: number;\n    /** The rotation of the particle in radians. */\n    public rotation: number;\n    /** The color of the particle as a hexadecimal number. */\n    public color: number;\n    /** The texture of the particle. */\n    public texture: Texture;\n\n    private _alpha: number;\n    private _tint: number;\n\n    constructor(options: Texture | ParticleOptions)\n    {\n        if (options instanceof Texture)\n        {\n            this.texture = options;\n            assignWithIgnore(this, Particle.defaultOptions, {});\n        }\n        else\n        {\n            const combined = { ...Particle.defaultOptions, ...options };\n\n            assignWithIgnore(this, combined, {});\n        }\n    }\n\n    /** Gets or sets the alpha value of the particle. */\n    get alpha(): number\n    {\n        return this._alpha;\n    }\n\n    set alpha(value: number)\n    {\n        this._alpha = Math.min(Math.max(value, 0), 1);\n\n        this._updateColor();\n    }\n\n    /** Gets or sets the tint color of the particle. */\n    get tint(): number\n    {\n        const bgr = this._tint;\n\n        return ((bgr & 0xFF) << 16) + (bgr & 0xFF00) + ((bgr >> 16) & 0xFF);\n    }\n\n    set tint(value: ColorSource)\n    {\n        if (typeof value === 'number')\n        {\n            this._tint = value;\n        }\n        else\n        {\n            this._tint = Color.shared.setValue(value ?? 0xFFFFFF).toBgrNumber();\n        }\n\n        this._updateColor();\n    }\n\n    private _updateColor()\n    {\n        // combine alpha and tint\n        this.color = this._tint + (((this._alpha * 255) | 0) << 24);\n    }\n}\n"],"mappings":";;;;AA2EO,MAAMA,SAAA,GAAN,MAAMA,SACb;EAmCIC,YAAYC,OACZ;IACI,IAAIA,OAAA,YAAmBC,OACvB;MACI,KAAKC,OAAU,GAAAF,OAAA;MACfG,gBAAA,CAAiB,IAAM,EAAAL,SAAA,CAASM,cAAgB,IAAE;IAAA,CAGtD;MACI,MAAMC,QAAA,GAAW;QAAE,GAAGP,SAAS,CAAAM,cAAA;QAAgB,GAAGJ;MAAQ;MAEzCG,gBAAA,OAAME,QAAU,IAAE;IAAA;EACvC;EACJ;EAGA,IAAIC,KACJA,CAAA;IACI,OAAO,IAAK,CAAAC,MAAA;EAAA;EAGhB,IAAID,MAAME,KACV;IACS,KAAAD,MAAA,GAASE,IAAA,CAAKC,GAAI,CAAAD,IAAA,CAAKE,GAAA,CAAIH,KAAO,GAAC,GAAG,CAAC;IAE5C,KAAKI,YAAa;EAAA;EACtB;EAGA,IAAIC,IACJA,CAAA;IACI,MAAMC,GAAA,GAAM,IAAK,CAAAC,KAAA;IAEjB,SAASD,GAAA,GAAM,GAAS,YAAOA,GAAM,aAAYA,GAAA,IAAO,EAAM;EAAA;EAGlE,IAAID,KAAKL,KACT;IACQ,WAAOA,KAAA,KAAU,QACrB;MACI,KAAKO,KAAQ,GAAAP,KAAA;IAAA,CAGjB;MACI,KAAKO,KAAA,GAAQC,KAAM,CAAAC,MAAA,CAAOC,QAAA,CAASV,KAAS,YAAQ,EAAEW,WAAY;IAAA;IAGtE,KAAKP,YAAa;EAAA;EAGdA,YACRA,CAAA;IAEI,KAAKQ,KAAA,GAAQ,IAAK,CAAAL,KAAA,KAAW,IAAK,CAAAR,MAAA,GAAS,MAAO,CAAM;EAAA;AAEhE;AAAA;AA3FaT,SAAA,CAGKM,cAA2C;EACrDiB,OAAS;EACTC,OAAS;EACTC,CAAG;EACHC,CAAG;EACHC,MAAQ;EACRC,MAAQ;EACRC,QAAU;EACVd,IAAM;EACNP,KAAO;AACX;AAbG,IAAMsB,QAAN,GAAA9B,SAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}