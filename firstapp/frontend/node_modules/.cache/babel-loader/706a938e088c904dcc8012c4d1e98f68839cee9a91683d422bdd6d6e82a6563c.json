{"ast":null,"code":"\"use strict\";\n\nfunction createIndicesForQuads(size, outBuffer = null) {\n  const totalIndices = size * 6;\n  if (totalIndices > 65535) {\n    outBuffer = outBuffer || new Uint32Array(totalIndices);\n  } else {\n    outBuffer = outBuffer || new Uint16Array(totalIndices);\n  }\n  if (outBuffer.length !== totalIndices) {\n    throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n  }\n  for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4) {\n    outBuffer[i + 0] = j + 0;\n    outBuffer[i + 1] = j + 1;\n    outBuffer[i + 2] = j + 2;\n    outBuffer[i + 3] = j + 0;\n    outBuffer[i + 4] = j + 2;\n    outBuffer[i + 5] = j + 3;\n  }\n  return outBuffer;\n}\nexport { createIndicesForQuads };","map":{"version":3,"names":["createIndicesForQuads","size","outBuffer","totalIndices","Uint32Array","Uint16Array","length","Error","i","j"],"sources":["/Users/huangjiashu/Desktop/AI Projects/node_modules/pixi.js/src/scene/particle-container/shared/utils/createIndicesForQuads.ts"],"sourcesContent":["/**\n * Generic Mask Stack data structure\n * @function createIndicesForQuads\n * @param {number} size - Number of quads\n * @param {Uint16Array|Uint32Array} [outBuffer] - Buffer for output, length has to be `6 * size`\n * @returns {Uint16Array|Uint32Array} - Resulting index buffer\n */\nexport function createIndicesForQuads(\n    size: number,\n    outBuffer: Uint16Array | Uint32Array | null = null\n): Uint16Array | Uint32Array\n{\n    // the total number of indices in our array, there are 6 points per quad.\n    const totalIndices = size * 6;\n\n    // Check if we need to use Uint32Array\n    if (totalIndices > 65535)\n    {\n        outBuffer = outBuffer || new Uint32Array(totalIndices); // Use Uint32Array if needed\n    }\n    else\n    {\n        outBuffer = outBuffer || new Uint16Array(totalIndices);\n    }\n\n    if (outBuffer.length !== totalIndices)\n    {\n        throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n    }\n\n    // fill the indices with the quads to draw\n    for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4)\n    {\n        outBuffer[i + 0] = j + 0;\n        outBuffer[i + 1] = j + 1;\n        outBuffer[i + 2] = j + 2;\n        outBuffer[i + 3] = j + 0;\n        outBuffer[i + 4] = j + 2;\n        outBuffer[i + 5] = j + 3;\n    }\n\n    return outBuffer;\n}\n"],"mappings":";;AAOgB,SAAAA,sBACZC,IACA,EAAAC,SAAA,GAA8C,IAElD;EAEI,MAAMC,YAAA,GAAeF,IAAO;EAG5B,IAAIE,YAAA,GAAe,KACnB;IACgBD,SAAA,GAAAA,SAAA,IAAa,IAAIE,WAAA,CAAYD,YAAY;EAAA,CAGzD;IACgBD,SAAA,GAAAA,SAAA,IAAa,IAAIG,WAAA,CAAYF,YAAY;EAAA;EAGrD,IAAAD,SAAA,CAAUI,MAAA,KAAWH,YACzB;IACI,MAAM,IAAII,KAAM,wCAAuCL,SAAA,CAAUI,MAAM,iBAAiBH,YAAY,EAAE;EAAA;EAIjG,SAAAK,CAAA,GAAI,GAAGC,CAAI,MAAGD,CAAA,GAAIL,YAAc,EAAAK,CAAA,IAAK,CAAG,EAAAC,CAAA,IAAK,CACtD;IACcP,SAAA,CAAAM,CAAA,GAAI,CAAC,IAAIC,CAAI;IACbP,SAAA,CAAAM,CAAA,GAAI,CAAC,IAAIC,CAAI;IACbP,SAAA,CAAAM,CAAA,GAAI,CAAC,IAAIC,CAAI;IACbP,SAAA,CAAAM,CAAA,GAAI,CAAC,IAAIC,CAAI;IACbP,SAAA,CAAAM,CAAA,GAAI,CAAC,IAAIC,CAAI;IACbP,SAAA,CAAAM,CAAA,GAAI,CAAC,IAAIC,CAAI;EAAA;EAGpB,OAAAP,SAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}