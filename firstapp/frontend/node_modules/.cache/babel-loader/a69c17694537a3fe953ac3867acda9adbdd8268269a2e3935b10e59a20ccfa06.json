{"ast":null,"code":"import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\n\"use strict\";\nfunction getTemporaryCanvasFromImage(image, resolution) {\n  const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(image.width, image.height, resolution);\n  const {\n    context\n  } = canvasAndContext;\n  context.clearRect(0, 0, image.width, image.height);\n  context.drawImage(image, 0, 0);\n  return canvasAndContext;\n}\nexport { getTemporaryCanvasFromImage };","map":{"version":3,"names":["getTemporaryCanvasFromImage","image","resolution","canvasAndContext","CanvasPool","getOptimalCanvasAndContext","width","height","context","clearRect","drawImage"],"sources":["/Users/huangjiashu/Desktop/AI Projects/node_modules/pixi.js/src/scene/text-html/utils/getTemporaryCanvasFromImage.ts"],"sourcesContent":["import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\n\nimport type { CanvasAndContext } from '../../../rendering/renderers/shared/texture/CanvasPool';\n\n/**\n * This function converts an image to a canvas, and returns the canvas.\n * It is used to convert images to canvases to work around a CORS issue where WebGPU cannot\n * upload an SVGImage to a texture.\n *\n * It uses the CanvasPool to get an optimal canvas and context, and then draws the image onto it.\n * Remember to return this canvas is immediately to the CanvasPool for reuse when you are done with it.\n * (eg upload it to the GPU!)\n * @param image - The image to convert to a canvas.\n * @param resolution - The resolution of the canvas.\n */\nexport function getTemporaryCanvasFromImage(image: HTMLImageElement, resolution: number): CanvasAndContext\n{\n    // Get an optimal canvas and context from the CanvasPool, based on the\n    // dimensions of the image and the desired resolution.\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n        image.width,\n        image.height,\n        resolution\n    );\n\n    // Clear the context of the canvas, and draw the image onto it.\n    const { context } = canvasAndContext;\n\n    context.clearRect(0, 0, image.width, image.height);\n    context.drawImage(image, 0, 0);\n\n    // Return the canvas.\n    return canvasAndContext;\n}\n\n"],"mappings":";;AAegB,SAAAA,4BAA4BC,KAAA,EAAyBC,UACrE;EAGI,MAAMC,gBAAA,GAAmBC,UAAW,CAAAC,0BAAA,CAChCJ,KAAM,CAAAK,KAAA,EACNL,KAAM,CAAAM,MAAA,EACNL,UAAA,CACJ;EAGM;IAAEM;EAAA,CAAY,GAAAL,gBAAA;EAEpBK,OAAA,CAAQC,SAAA,CAAU,CAAG,KAAGR,KAAM,CAAAK,KAAA,EAAOL,KAAA,CAAMM,MAAM;EACzCC,OAAA,CAAAE,SAAA,CAAUT,KAAO,KAAG,CAAC;EAGtB,OAAAE,gBAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}