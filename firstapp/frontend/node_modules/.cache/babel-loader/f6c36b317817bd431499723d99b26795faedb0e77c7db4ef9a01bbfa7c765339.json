{"ast":null,"code":"\"use strict\";\n\nfunction cleanHash(hash) {\n  let clean = false;\n  for (const i in hash) {\n    if (hash[i] == void 0) {\n      clean = true;\n      break;\n    }\n  }\n  if (!clean) return hash;\n  const cleanHash2 = /* @__PURE__ */Object.create(null);\n  for (const i in hash) {\n    const value = hash[i];\n    if (value) {\n      cleanHash2[i] = value;\n    }\n  }\n  return cleanHash2;\n}\nfunction cleanArray(arr) {\n  let offset = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == void 0) {\n      offset++;\n    } else {\n      arr[i - offset] = arr[i];\n    }\n  }\n  arr.length = arr.length - offset;\n  return arr;\n}\nexport { cleanArray, cleanHash };","map":{"version":3,"names":["cleanHash","hash","clean","i","cleanHash2","Object","create","value","cleanArray","arr","offset","length"],"sources":["/Users/huangjiashu/Desktop/AI Projects/node_modules/pixi.js/src/utils/data/clean.ts"],"sourcesContent":["/**\n * Takes a hash and removes all the `undefined`/`null` values from it.\n * In PixiJS, we tend to null properties instead of using 'delete' for performance reasons.\n * However, in some cases, this could be a problem if the hash grows too large over time,\n * this function can be used to clean a hash.\n * @param hash - The hash to clean.\n * @returns A new hash with all the `undefined`/`null` values removed.\n * @memberof utils\n */\nexport function cleanHash<T>(hash: Record<string, T>): Record<string, T>\n{\n    let clean = false;\n\n    for (const i in hash)\n    {\n        // eslint-disable-next-line eqeqeq\n        if (hash[i] == undefined)\n        {\n            clean = true;\n            break;\n        }\n    }\n\n    if (!clean) return hash;\n\n    const cleanHash = Object.create(null);\n\n    for (const i in hash)\n    {\n        const value = hash[i];\n\n        if (value)\n        {\n            cleanHash[i] = value;\n        }\n    }\n\n    return cleanHash;\n}\n\n/**\n * Removes all `undefined`/`null` elements from the given array and compacts the array.\n *\n * This function iterates through the array, shifting non-undefined elements to the left\n * to fill gaps created by `undefined` elements. The length of the array is then adjusted\n * to remove the trailing `undefined` elements.\n * @param arr - The array to be cleaned.\n * @returns The cleaned array with all `undefined` elements removed.\n * @example\n * // Example usage:\n * const arr = [1, undefined, 2, undefined, 3];\n * const cleanedArr = cleanArray(arr);\n * console.log(cleanedArr); // Output: [1, 2, 3]\n * @memberof utils\n */\nexport function cleanArray<T>(arr: T[]): T[]\n{\n    let offset = 0;\n\n    for (let i = 0; i < arr.length; i++)\n    {\n        // eslint-disable-next-line eqeqeq\n        if (arr[i] == undefined)\n        {\n            offset++;\n        }\n        else\n        {\n            arr[i - offset] = arr[i];\n        }\n    }\n\n    arr.length = arr.length - offset;\n\n    return arr;\n}\n"],"mappings":";;AASO,SAASA,UAAaC,IAC7B;EACI,IAAIC,KAAQ;EAEZ,WAAWC,CAAA,IAAKF,IAChB;IAEQ,IAAAA,IAAA,CAAKE,CAAC,KAAK,KACf;MACYD,KAAA;MACR;IAAA;EACJ;EAGJ,IAAI,CAACA,KAAA,EAAc,OAAAD,IAAA;EAEb,MAAAG,UAAA,kBAAmBC,MAAA,CAAAC,MAAA,CAAO,IAAI;EAEpC,WAAWH,CAAA,IAAKF,IAChB;IACU,MAAAM,KAAA,GAAQN,IAAA,CAAKE,CAAC;IAEpB,IAAII,KACJ;MACIH,UAAA,CAAUD,CAAC,CAAI,GAAAI,KAAA;IAAA;EACnB;EAGG,OAAAH,UAAA;AACX;AAiBO,SAASI,WAAcC,GAC9B;EACI,IAAIC,MAAS;EAEb,SAASP,CAAI,MAAGA,CAAI,GAAAM,GAAA,CAAIE,MAAA,EAAQR,CAChC;IAEQ,IAAAM,GAAA,CAAIN,CAAC,KAAK,KACd;MACIO,MAAA;IAAA,CAGJ;MACID,GAAA,CAAIN,CAAI,GAAAO,MAAM,CAAI,GAAAD,GAAA,CAAIN,CAAC;IAAA;EAC3B;EAGAM,GAAA,CAAAE,MAAA,GAASF,GAAA,CAAIE,MAAS,GAAAD,MAAA;EAEnB,OAAAD,GAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}