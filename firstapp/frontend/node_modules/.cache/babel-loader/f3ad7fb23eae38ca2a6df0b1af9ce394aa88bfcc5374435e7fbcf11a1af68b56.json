{"ast":null,"code":"import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { cleanHash, cleanArray } from '../../../../utils/data/clean.mjs';\n\"use strict\";\nconst _RenderableGCSystem = class _RenderableGCSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._managedRenderables = [];\n    this._managedHashes = [];\n    this._managedArrays = [];\n    this._renderer = renderer;\n  }\n  init(options) {\n    options = {\n      ..._RenderableGCSystem.defaultOptions,\n      ...options\n    };\n    this.maxUnusedTime = options.renderableGCMaxUnusedTime;\n    this._frequency = options.renderableGCFrequency;\n    this.enabled = options.renderableGCActive;\n  }\n  get enabled() {\n    return !!this._handler;\n  }\n  set enabled(value) {\n    if (this.enabled === value) return;\n    if (value) {\n      this._handler = this._renderer.scheduler.repeat(() => this.run(), this._frequency, false);\n      this._hashHandler = this._renderer.scheduler.repeat(() => {\n        for (const hash of this._managedHashes) {\n          hash.context[hash.hash] = cleanHash(hash.context[hash.hash]);\n        }\n      }, this._frequency);\n      this._arrayHandler = this._renderer.scheduler.repeat(() => {\n        for (const array of this._managedArrays) {\n          cleanArray(array.context[array.hash]);\n        }\n      }, this._frequency);\n    } else {\n      this._renderer.scheduler.cancel(this._handler);\n      this._renderer.scheduler.cancel(this._hashHandler);\n      this._renderer.scheduler.cancel(this._arrayHandler);\n    }\n  }\n  addManagedHash(context, hash) {\n    this._managedHashes.push({\n      context,\n      hash\n    });\n  }\n  addManagedArray(context, hash) {\n    this._managedArrays.push({\n      context,\n      hash\n    });\n  }\n  prerender() {\n    this._now = performance.now();\n  }\n  addRenderable(renderable, instructionSet) {\n    if (!this.enabled) return;\n    renderable._lastUsed = this._now;\n    if (renderable._lastInstructionTick === -1) {\n      this._managedRenderables.push(renderable);\n      renderable.once(\"destroyed\", this._removeRenderable, this);\n    }\n    renderable._lastInstructionTick = instructionSet.tick;\n  }\n  /** Runs the scheduled garbage collection */\n  run() {\n    const now = performance.now();\n    const managedRenderables = this._managedRenderables;\n    const renderPipes = this._renderer.renderPipes;\n    let offset = 0;\n    for (let i = 0; i < managedRenderables.length; i++) {\n      const renderable = managedRenderables[i];\n      if (renderable === null) {\n        offset++;\n        continue;\n      }\n      const renderGroup = renderable.renderGroup ?? renderable.parentRenderGroup;\n      const currentIndex = renderGroup?.instructionSet?.tick ?? -1;\n      if (renderable._lastInstructionTick !== currentIndex && now - renderable._lastUsed > this.maxUnusedTime) {\n        if (!renderable.destroyed) {\n          const rp = renderPipes;\n          rp[renderable.renderPipeId].destroyRenderable(renderable);\n        }\n        renderable._lastInstructionTick = -1;\n        offset++;\n        renderable.off(\"destroyed\", this._removeRenderable, this);\n      } else {\n        managedRenderables[i - offset] = renderable;\n      }\n    }\n    managedRenderables.length = managedRenderables.length - offset;\n  }\n  destroy() {\n    this.enabled = false;\n    this._renderer = null;\n    this._managedRenderables.length = 0;\n    this._managedHashes.length = 0;\n    this._managedArrays.length = 0;\n  }\n  _removeRenderable(renderable) {\n    const index = this._managedRenderables.indexOf(renderable);\n    if (index >= 0) {\n      renderable.off(\"destroyed\", this._removeRenderable, this);\n      this._managedRenderables[index] = null;\n    }\n  }\n};\n/** @ignore */\n_RenderableGCSystem.extension = {\n  type: [ExtensionType.WebGLSystem, ExtensionType.WebGPUSystem],\n  name: \"renderableGC\",\n  priority: 0\n};\n/** default options for the renderableGCSystem */\n_RenderableGCSystem.defaultOptions = {\n  /**\n   * If set to true, this will enable the garbage collector on the GPU.\n   * @default true\n   */\n  renderableGCActive: true,\n  /**\n   * The maximum idle frames before a texture is destroyed by garbage collection.\n   * @default 60 * 60\n   */\n  renderableGCMaxUnusedTime: 6e4,\n  /**\n   * Frames between two garbage collections.\n   * @default 600\n   */\n  renderableGCFrequency: 3e4\n};\nlet RenderableGCSystem = _RenderableGCSystem;\nexport { RenderableGCSystem };","map":{"version":3,"names":["_RenderableGCSystem","constructor","renderer","_managedRenderables","_managedHashes","_managedArrays","_renderer","init","options","defaultOptions","maxUnusedTime","renderableGCMaxUnusedTime","_frequency","renderableGCFrequency","enabled","renderableGCActive","_handler","value","scheduler","repeat","run","_hashHandler","hash","context","cleanHash","_arrayHandler","array","cleanArray","cancel","addManagedHash","push","addManagedArray","prerender","_now","performance","now","addRenderable","renderable","instructionSet","_lastUsed","_lastInstructionTick","once","_removeRenderable","tick","managedRenderables","renderPipes","offset","i","length","renderGroup","parentRenderGroup","currentIndex","destroyed","rp","renderPipeId","destroyRenderable","off","destroy","index","indexOf","extension","type","ExtensionType","WebGLSystem","WebGPUSystem","name","priority","RenderableGCSystem"],"sources":["/Users/huangjiashu/Desktop/AI Projects/node_modules/pixi.js/src/rendering/renderers/shared/texture/RenderableGCSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\nimport { cleanArray, cleanHash } from '../../../../utils/data/clean';\n\nimport type { Container } from '../../../../scene/container/Container';\nimport type { Renderer } from '../../types';\nimport type { InstructionSet } from '../instructions/InstructionSet';\nimport type { RenderPipe } from '../instructions/RenderPipe';\nimport type { Renderable } from '../Renderable';\nimport type { System } from '../system/System';\n\n/**\n * Options for the {@link RenderableGCSystem}.\n * @memberof rendering\n * @property {boolean} [renderableGCActive=true] - If set to true, this will enable the garbage collector on the renderables.\n * @property {number} [renderableGCAMaxIdle=60000] -\n * The maximum idle frames before a texture is destroyed by garbage collection.\n * @property {number} [renderableGCCheckCountMax=60000] - time between two garbage collections.\n */\nexport interface RenderableGCSystemOptions\n{\n    /**\n     * If set to true, this will enable the garbage collector on the GPU.\n     * @default true\n     * @memberof rendering.SharedRendererOptions\n     */\n    renderableGCActive: boolean;\n    /**\n     * The maximum idle frames before a texture is destroyed by garbage collection.\n     * @default 60 * 60\n     * @memberof rendering.SharedRendererOptions\n     */\n    renderableGCMaxUnusedTime: number;\n    /**\n     * Frames between two garbage collections.\n     * @default 600\n     * @memberof rendering.SharedRendererOptions\n     */\n    renderableGCFrequency: number;\n}\n/**\n * System plugin to the renderer to manage renderable garbage collection. When rendering\n * stuff with the renderer will assign resources to each renderable. This could be for example\n * a batchable Sprite, or a text texture. If the renderable is not used for a certain amount of time\n * its resources will be tided up by its render pipe.\n * @memberof rendering\n */\nexport class RenderableGCSystem implements System<RenderableGCSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'renderableGC',\n        priority: 0\n    } as const;\n\n    /** default options for the renderableGCSystem */\n    public static defaultOptions: RenderableGCSystemOptions = {\n        /**\n         * If set to true, this will enable the garbage collector on the GPU.\n         * @default true\n         */\n        renderableGCActive: true,\n        /**\n         * The maximum idle frames before a texture is destroyed by garbage collection.\n         * @default 60 * 60\n         */\n        renderableGCMaxUnusedTime: 60000,\n        /**\n         * Frames between two garbage collections.\n         * @default 600\n         */\n        renderableGCFrequency: 30000,\n    };\n\n    /**\n     * Maximum idle frames before a texture is destroyed by garbage collection.\n     * @see renderableGCSystem.defaultMaxIdle\n     */\n    public maxUnusedTime: number;\n\n    private _renderer: Renderer;\n\n    private readonly _managedRenderables: Renderable[] = [];\n    private _handler: number;\n    private _frequency: number;\n    private _now: number;\n\n    private readonly _managedHashes: {context: any, hash: string}[] = [];\n    private _hashHandler: number;\n\n    private readonly _managedArrays: {context: any, hash: string}[] = [];\n    private _arrayHandler: number;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public init(options: RenderableGCSystemOptions): void\n    {\n        options = { ...RenderableGCSystem.defaultOptions, ...options };\n\n        this.maxUnusedTime = options.renderableGCMaxUnusedTime;\n        this._frequency = options.renderableGCFrequency;\n\n        this.enabled = options.renderableGCActive;\n    }\n\n    get enabled(): boolean\n    {\n        return !!this._handler;\n    }\n\n    set enabled(value: boolean)\n    {\n        if (this.enabled === value) return;\n\n        if (value)\n        {\n            this._handler = this._renderer.scheduler.repeat(\n                () => this.run(),\n                this._frequency,\n                false\n            );\n\n            this._hashHandler = this._renderer.scheduler.repeat(\n                () =>\n                {\n                    for (const hash of this._managedHashes)\n                    {\n                        hash.context[hash.hash] = cleanHash(hash.context[hash.hash]);\n                    }\n                },\n                this._frequency\n            );\n\n            this._arrayHandler = this._renderer.scheduler.repeat(\n                () =>\n                {\n                    for (const array of this._managedArrays)\n                    {\n                        cleanArray(array.context[array.hash]);\n                    }\n                },\n                this._frequency\n            );\n        }\n        else\n        {\n            this._renderer.scheduler.cancel(this._handler);\n            this._renderer.scheduler.cancel(this._hashHandler);\n            this._renderer.scheduler.cancel(this._arrayHandler);\n        }\n    }\n\n    public addManagedHash<T>(context: T, hash: string): void\n    {\n        this._managedHashes.push({ context, hash: hash as string });\n    }\n\n    public addManagedArray<T>(context: T, hash: string): void\n    {\n        this._managedArrays.push({ context, hash: hash as string });\n    }\n\n    public prerender(): void\n    {\n        this._now = performance.now();\n    }\n\n    public addRenderable(renderable: Renderable, instructionSet: InstructionSet): void\n    {\n        if (!this.enabled) return;\n\n        renderable._lastUsed = this._now;\n\n        if (renderable._lastInstructionTick === -1)\n        {\n            this._managedRenderables.push(renderable);\n            renderable.once('destroyed', this._removeRenderable, this);\n        }\n\n        renderable._lastInstructionTick = instructionSet.tick;\n    }\n\n    /** Runs the scheduled garbage collection */\n    public run(): void\n    {\n        const now = performance.now();\n\n        const managedRenderables = this._managedRenderables;\n\n        const renderPipes = this._renderer.renderPipes;\n\n        let offset = 0;\n\n        for (let i = 0; i < managedRenderables.length; i++)\n        {\n            const renderable = managedRenderables[i];\n\n            if (renderable === null)\n            {\n                offset++;\n                continue;\n            }\n\n            const renderGroup = renderable.renderGroup ?? renderable.parentRenderGroup;\n            const currentIndex = renderGroup?.instructionSet?.tick ?? -1;\n\n            if (renderable._lastInstructionTick !== currentIndex && now - renderable._lastUsed > this.maxUnusedTime)\n            {\n                if (!renderable.destroyed)\n                {\n                    const rp = renderPipes as unknown as Record<string, RenderPipe>;\n\n                    rp[renderable.renderPipeId].destroyRenderable(renderable);\n                }\n\n                // remove from the array as this has been destroyed..\n                renderable._lastInstructionTick = -1;\n                offset++;\n                renderable.off('destroyed', this._removeRenderable, this);\n            }\n            else\n            {\n                managedRenderables[i - (offset)] = renderable;\n            }\n        }\n\n        managedRenderables.length = managedRenderables.length - offset;\n    }\n\n    public destroy(): void\n    {\n        this.enabled = false;\n        this._renderer = null as any as Renderer;\n        this._managedRenderables.length = 0;\n        this._managedHashes.length = 0;\n        this._managedArrays.length = 0;\n    }\n\n    private _removeRenderable(renderable: Container): void\n    {\n        const index = this._managedRenderables.indexOf(renderable as Renderable);\n\n        if (index >= 0)\n        {\n            renderable.off('destroyed', this._removeRenderable, this);\n            this._managedRenderables[index] = null;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}