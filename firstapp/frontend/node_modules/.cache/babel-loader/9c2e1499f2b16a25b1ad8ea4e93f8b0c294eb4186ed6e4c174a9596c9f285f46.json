{"ast":null,"code":"import { Color } from '../../../../color/Color.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle.mjs';\nimport fragment from './particles.frag.mjs';\nimport vertex from './particles.vert.mjs';\nimport wgsl from './particles.wgsl.mjs';\n\"use strict\";\nclass ParticleShader extends Shader {\n  constructor() {\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment\n    });\n    const gpuProgram = GpuProgram.from({\n      fragment: {\n        source: wgsl,\n        entryPoint: \"mainFragment\"\n      },\n      vertex: {\n        source: wgsl,\n        entryPoint: \"mainVertex\"\n      }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        // this will be replaced with the texture from the particle container\n        uTexture: Texture.WHITE.source,\n        // this will be replaced with the texture style from the particle container\n        uSampler: new TextureStyle({}),\n        // this will be replaced with the local uniforms from the particle container\n        uniforms: {\n          uTranslationMatrix: {\n            value: new Matrix(),\n            type: \"mat3x3<f32>\"\n          },\n          uColor: {\n            value: new Color(16777215),\n            type: \"vec4<f32>\"\n          },\n          uRound: {\n            value: 1,\n            type: \"f32\"\n          },\n          uResolution: {\n            value: [0, 0],\n            type: \"vec2<f32>\"\n          }\n        }\n      }\n    });\n  }\n}\nexport { ParticleShader };","map":{"version":3,"names":["ParticleShader","Shader","constructor","glProgram","GlProgram","from","vertex","fragment","gpuProgram","GpuProgram","source","wgsl","entryPoint","resources","uTexture","Texture","WHITE","uSampler","TextureStyle","uniforms","uTranslationMatrix","value","Matrix","type","uColor","Color","uRound","uResolution"],"sources":["/Users/huangjiashu/Desktop/AI Projects/node_modules/pixi.js/src/scene/particle-container/shared/shader/ParticleShader.ts"],"sourcesContent":["import { Color } from '../../../../color/Color';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle';\nimport fragment from './particles.frag';\nimport vertex from './particles.vert';\nimport wgsl from './particles.wgsl';\n\nexport class ParticleShader extends Shader\n{\n    constructor()\n    {\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment\n        });\n\n        const gpuProgram = GpuProgram.from({\n            fragment: {\n                source: wgsl,\n                entryPoint: 'mainFragment'\n            },\n            vertex: {\n                source: wgsl,\n                entryPoint: 'mainVertex'\n            }\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                // this will be replaced with the texture from the particle container\n                uTexture: Texture.WHITE.source,\n                // this will be replaced with the texture style from the particle container\n                uSampler: new TextureStyle({}),\n                // this will be replaced with the local uniforms from the particle container\n                uniforms: {\n                    uTranslationMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Color(0xFFFFFF), type: 'vec4<f32>' },\n                    uRound: { value: 1, type: 'f32' },\n                    uResolution: { value: [0, 0], type: 'vec2<f32>' },\n                }\n            }\n        });\n    }\n}\n"],"mappings":";;;;;;;;;;;AAWO,MAAMA,cAAA,SAAuBC,MACpC;EACIC,WACAA,CAAA;IACU,MAAAC,SAAA,GAAYC,SAAA,CAAUC,IAAK;MAC7BC,MAAA;MACAC;IAAA,CACH;IAEK,MAAAC,UAAA,GAAaC,UAAA,CAAWJ,IAAK;MAC/BE,QAAU;QACNG,MAAQ,EAAAC,IAAA;QACRC,UAAY;MAAA,CAChB;MACAN,MAAQ;QACJI,MAAQ,EAAAC,IAAA;QACRC,UAAY;MAAA;IAChB,CACH;IAEK;MACFT,SAAA;MACAK,UAAA;MACAK,SAAW;QAAA;QAEPC,QAAA,EAAUC,OAAA,CAAQC,KAAM,CAAAN,MAAA;QAAA;QAExBO,QAAU,MAAIC,YAAa,GAAE;QAAA;QAE7BC,QAAU;UACNC,kBAAA,EAAoB;YAAEC,KAAA,EAAO,IAAIC,MAAO;YAAGC,IAAA,EAAM;UAAc;UAC/DC,MAAA,EAAQ;YAAEH,KAAO,MAAII,KAAA,CAAM,QAAQ;YAAGF,IAAA,EAAM;UAAY;UACxDG,MAAQ;YAAEL,KAAO;YAAGE,IAAA,EAAM;UAAM;UAChCI,WAAA,EAAa;YAAEN,KAAO,GAAC,GAAG,CAAC;YAAGE,IAAA,EAAM;UAAY;QAAA;MACpD;IACJ,CACH;EAAA;AAET","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}