{"ast":null,"code":"var _jsxFileName = \"/Users/huangjiashu/Desktop/AI Projects/doai/firstapp/frontend/src/components/Workflow.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Step from \"./Step\";\nimport ModalContainer from \"./ModalContainer\";\nimport \"../styles/Workflow.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Workflow = ({\n  workflow,\n  phaseDict\n}) => {\n  _s();\n  const groupedByPhase = workflow.reduce((acc, subtask) => {\n    acc[subtask.phase] = acc[subtask.phase] || [];\n    acc[subtask.phase].push(subtask);\n    return acc;\n  }, {});\n  const [evidence, setEvidence] = useState({}); // Store evidence for each step\n  const [loadingEvidence, setLoadingEvidence] = useState({});\n  const [modalContent, setModalContent] = useState(null);\n  const callApiForEvidence = async (name, execution) => {\n    try {\n      const response = await axios.post(\"http://127.0.0.1:8000/api/process_step\", {\n        name: name,\n        execution: execution\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const evidence = response.data.evidence.map(item => ({\n        title: item.title,\n        link: item.link,\n        snippet: item.snippet\n      }));\n      return evidence.length > 0 ? evidence // Assuming you want the first evidence item\n      : {\n        title: \"No evidence found.\",\n        link: \"\",\n        snippet: \"\"\n      };\n    } catch (error) {\n      console.error(\"Error calling API:\", error);\n      return {\n        title: \"Error retrieving evidence.\",\n        link: \"\",\n        snippet: \"\"\n      };\n    }\n  };\n  const handleRoleCircleClick = async (step, phaseIndex, subtaskIndex, stepIndex) => {\n    const evidenceKey = `${phaseIndex}-${subtaskIndex}-${stepIndex}`;\n\n    // Show loading modal\n    setModalContent(/*#__PURE__*/_jsxDEV(ModalContainer, {\n      isLoading: true,\n      step: step,\n      evidence: [],\n      classification: step.classification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this));\n\n    // Fetch evidence data\n    const evidenceItem = await callApiForEvidence(step.name, step.execution);\n    setEvidence(prev => ({\n      ...prev,\n      [evidenceKey]: evidenceItem\n    }));\n    setLoadingEvidence(prev => ({\n      ...prev,\n      [evidenceKey]: false\n    }));\n\n    // Update modal with evidence data\n    setModalContent(/*#__PURE__*/_jsxDEV(ModalContainer, {\n      isLoading: false,\n      step: step,\n      evidence: evidence[evidenceKey] || [],\n      classification: step.classification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"workflow-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"subtasks-wrapper\",\n        children: workflow.map((subtask, subtaskIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"subtask-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"subtask-header\",\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"subtask-title\",\n              children: subtask.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"steps-container\",\n            children: subtask.steps.map((step, stepIndex) => {\n              const evidenceKey = `${subtaskIndex}-${stepIndex}`;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"step-card\",\n                children: /*#__PURE__*/_jsxDEV(Step, {\n                  step: {\n                    ...step,\n                    index: stepIndex\n                  },\n                  evidenceKey: evidenceKey,\n                  onRoleCircleClick: () => handleRoleCircleClick(step, subtaskIndex, stepIndex),\n                  evidence: evidence[evidenceKey],\n                  loading: loadingEvidence[evidenceKey]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 23\n                }, this)\n              }, stepIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this)]\n        }, subtaskIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), modalContent && modalContent]\n  }, void 0, true);\n};\n_s(Workflow, \"5HoODg5iTZCiwxnJNf/k9f4bjps=\");\n_c = Workflow;\nexport default Workflow;\nvar _c;\n$RefreshReg$(_c, \"Workflow\");","map":{"version":3,"names":["React","useState","axios","Step","ModalContainer","jsxDEV","_jsxDEV","Fragment","_Fragment","Workflow","workflow","phaseDict","_s","groupedByPhase","reduce","acc","subtask","phase","push","evidence","setEvidence","loadingEvidence","setLoadingEvidence","modalContent","setModalContent","callApiForEvidence","name","execution","response","post","headers","data","map","item","title","link","snippet","length","error","console","handleRoleCircleClick","step","phaseIndex","subtaskIndex","stepIndex","evidenceKey","isLoading","classification","fileName","_jsxFileName","lineNumber","columnNumber","evidenceItem","prev","children","className","description","steps","index","onRoleCircleClick","loading","_c","$RefreshReg$"],"sources":["/Users/huangjiashu/Desktop/AI Projects/doai/firstapp/frontend/src/components/Workflow.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Step from \"./Step\";\nimport ModalContainer from \"./ModalContainer\";\nimport \"../styles/Workflow.css\";\n\nconst Workflow = ({ workflow, phaseDict }) => {\n  const groupedByPhase = workflow.reduce((acc, subtask) => {\n    acc[subtask.phase] = acc[subtask.phase] || [];\n    acc[subtask.phase].push(subtask);\n    return acc;\n  }, {});\n\n  const [evidence, setEvidence] = useState({}); // Store evidence for each step\n  const [loadingEvidence, setLoadingEvidence] = useState({});\n  const [modalContent, setModalContent] = useState(null);\n\n  const callApiForEvidence = async (name, execution) => {\n    try {\n      const response = await axios.post(\n        \"http://127.0.0.1:8000/api/process_step\",\n        { name: name, execution: execution },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      const evidence = response.data.evidence.map((item) => ({\n        title: item.title,\n        link: item.link,\n        snippet: item.snippet,\n      }));\n\n      return evidence.length > 0\n        ? evidence // Assuming you want the first evidence item\n        : { title: \"No evidence found.\", link: \"\", snippet: \"\" };\n    } catch (error) {\n      console.error(\"Error calling API:\", error);\n      return { title: \"Error retrieving evidence.\", link: \"\", snippet: \"\" };\n    }\n  };\n\n  const handleRoleCircleClick = async (\n    step,\n    phaseIndex,\n    subtaskIndex,\n    stepIndex\n  ) => {\n    const evidenceKey = `${phaseIndex}-${subtaskIndex}-${stepIndex}`;\n\n    // Show loading modal\n    setModalContent(\n      <ModalContainer\n        isLoading={true}\n        step={step}\n        evidence={[]}\n        classification={step.classification}\n      />\n    );\n\n    // Fetch evidence data\n    const evidenceItem = await callApiForEvidence(step.name, step.execution);\n    setEvidence((prev) => ({\n      ...prev,\n      [evidenceKey]: evidenceItem,\n    }));\n\n    setLoadingEvidence((prev) => ({ ...prev, [evidenceKey]: false }));\n\n    // Update modal with evidence data\n    setModalContent(\n      <ModalContainer\n        isLoading={false}\n        step={step}\n        evidence={evidence[evidenceKey] || []}\n        classification={step.classification}\n      />\n    );\n  };\n\n  return (\n    <>\n      <div className=\"workflow-container\">\n        <div className=\"subtasks-wrapper\">\n          {workflow.map((subtask, subtaskIndex) => (\n            <div key={subtaskIndex} className=\"subtask-card\">\n              <div className=\"subtask-header\">\n                <h2 className=\"subtask-title\">{subtask.description}</h2>\n              </div>\n\n              {/* Steps visible only on hover */}\n              <div className=\"steps-container\">\n                {subtask.steps.map((step, stepIndex) => {\n                  const evidenceKey = `${subtaskIndex}-${stepIndex}`;\n                  return (\n                    <div className=\"step-card\" key={stepIndex}>\n                      <Step\n                        step={{ ...step, index: stepIndex }}\n                        evidenceKey={evidenceKey}\n                        onRoleCircleClick={() =>\n                          handleRoleCircleClick(step, subtaskIndex, stepIndex)\n                        }\n                        evidence={evidence[evidenceKey]}\n                        loading={loadingEvidence[evidenceKey]}\n                      />\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Modal Container */}\n      {modalContent && modalContent}\n    </>\n  );\n};\n\nexport default Workflow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}