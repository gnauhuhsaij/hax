{"ast":null,"code":"import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from './BatchableSprite.mjs';\n\"use strict\";\nclass SpritePipe {\n  constructor(renderer) {\n    this._gpuSpriteHash = /* @__PURE__ */Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuSpriteHash\");\n  }\n  addRenderable(sprite, instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._gpuSpriteHash[sprite.uid];\n    if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite._batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const texture = sprite._texture;\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (gpuSprite.texture._source !== texture._source) {\n      return !gpuSprite._batcher.checkAndUpdateTexture(gpuSprite, texture);\n    }\n    return false;\n  }\n  destroyRenderable(sprite) {\n    const batchableSprite = this._gpuSpriteHash[sprite.uid];\n    BigPool.return(batchableSprite);\n    this._gpuSpriteHash[sprite.uid] = null;\n    sprite.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    batchableSprite.bounds = sprite.bounds;\n    batchableSprite.texture = sprite._texture;\n  }\n  _getGpuSprite(sprite) {\n    return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableSprite = BigPool.get(BatchableSprite);\n    batchableSprite.renderable = sprite;\n    batchableSprite.transform = sprite.groupTransform;\n    batchableSprite.texture = sprite._texture;\n    batchableSprite.bounds = sprite.bounds;\n    batchableSprite.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    this._gpuSpriteHash[sprite.uid] = batchableSprite;\n    sprite.on(\"destroyed\", this._destroyRenderableBound);\n    return batchableSprite;\n  }\n  destroy() {\n    for (const i in this._gpuSpriteHash) {\n      BigPool.return(this._gpuSpriteHash[i]);\n    }\n    this._gpuSpriteHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nSpritePipe.extension = {\n  type: [ExtensionType.WebGLPipes, ExtensionType.WebGPUPipes, ExtensionType.CanvasPipes],\n  name: \"sprite\"\n};\nexport { SpritePipe };","map":{"version":3,"names":["SpritePipe","constructor","renderer","_gpuSpriteHash","Object","create","_destroyRenderableBound","destroyRenderable","bind","_renderer","renderableGC","addManagedHash","addRenderable","sprite","instructionSet","gpuSprite","_getGpuSprite","didViewUpdate","_updateBatchableSprite","renderPipes","batch","addToBatch","updateRenderable","uid","_batcher","updateElement","validateRenderable","texture","_texture","_source","checkAndUpdateTexture","batchableSprite","BigPool","return","off","bounds","_initGPUSprite","get","BatchableSprite","renderable","transform","groupTransform","roundPixels","_roundPixels","on","destroy","i","extension","type","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","name"],"sources":["/Users/huangjiashu/Desktop/AI Projects/node_modules/pixi.js/src/scene/sprite/SpritePipe.ts"],"sourcesContent":["import { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableSprite } from './BatchableSprite';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { Container } from '../container/Container';\nimport type { Sprite } from './Sprite';\n\nexport class SpritePipe implements RenderPipe<Sprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'sprite',\n    } as const;\n\n    private _renderer: Renderer;\n    private _gpuSpriteHash: Record<number, BatchableSprite> = Object.create(null);\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_gpuSpriteHash');\n    }\n\n    public addRenderable(sprite: Sprite, instructionSet: InstructionSet)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        // TODO visibility\n        this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n    }\n\n    public updateRenderable(sprite: Sprite)\n    {\n        const gpuSprite = this._gpuSpriteHash[sprite.uid];\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        gpuSprite._batcher.updateElement(gpuSprite);\n    }\n\n    public validateRenderable(sprite: Sprite): boolean\n    {\n        const texture = sprite._texture;\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (gpuSprite.texture._source !== texture._source)\n        {\n            return !gpuSprite._batcher.checkAndUpdateTexture(gpuSprite, texture);\n        }\n\n        return false;\n    }\n\n    public destroyRenderable(sprite: Sprite)\n    {\n        const batchableSprite = this._gpuSpriteHash[sprite.uid];\n\n        // this will call reset!\n        BigPool.return(batchableSprite as PoolItem);\n\n        this._gpuSpriteHash[sprite.uid] = null;\n\n        sprite.off('destroyed', this._destroyRenderableBound);\n    }\n\n    private _updateBatchableSprite(sprite: Sprite, batchableSprite: BatchableSprite)\n    {\n        batchableSprite.bounds = sprite.bounds;\n        batchableSprite.texture = sprite._texture;\n    }\n\n    private _getGpuSprite(sprite: Sprite): BatchableSprite\n    {\n        return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n    }\n\n    private _initGPUSprite(sprite: Sprite): BatchableSprite\n    {\n        const batchableSprite = BigPool.get(BatchableSprite);\n\n        batchableSprite.renderable = sprite;\n\n        batchableSprite.transform = sprite.groupTransform;\n        batchableSprite.texture = sprite._texture;\n        batchableSprite.bounds = sprite.bounds;\n        batchableSprite.roundPixels = (this._renderer._roundPixels | sprite._roundPixels) as 0 | 1;\n\n        this._gpuSpriteHash[sprite.uid] = batchableSprite;\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        sprite.on('destroyed', this._destroyRenderableBound);\n\n        return batchableSprite;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuSpriteHash)\n        {\n            BigPool.return(this._gpuSpriteHash[i] as PoolItem);\n        }\n\n        this._gpuSpriteHash = null;\n        this._renderer = null;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}